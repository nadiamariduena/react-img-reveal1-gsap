{"version":3,"sources":["main.scss"],"names":[],"mappings":"AAAA,EACE,QAAS,CACT,SAAU,CACV,qBAAsB,CACvB,KAGC,iBAAkB,CACnB,iBAIG,WAAY,CACZ,YAAa,CACb,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,qBAAoC,CAGpC,iBAAkB,CAcnB,eAID,YAAa,CACb,YAAa,CACb,iBAAkB,CAClB,eAAgB,CAJlB,qBAyBI,UAAW,CACX,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,KAAM,CACN,OAAQ,CACR,qBAAoC,CA/BxC,mBAmCI,UAAW,CACX,eAAgB,CAChB,gBAAiB,CACjB,iBAAkB","file":"main.87c58149.chunk.css","sourcesContent":["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  overflow-x: hidden;\n}\n\n.main {\n  .container {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(255, 255, 255);\n    /*  visibility: hidden; so that we dont have anything from the start, \n     because while you will set up the app.js anim stuff,things are going to flash and it can be a mess */\n    visibility: hidden;\n\n    /*\n    \n\n  useEffect(() => {\n    tl.to(container, 1, {\n    ***********     css: { visibility: \"visible\" },   ********\n    }).to(imageReveal, 1.4, { width: \"0%\", ease: Power2.easeInOut });\n   \n  });\n    \n    \n    */\n  }\n}\n\n.img-container {\n  width: 1000px;\n  height: 600px;\n  position: relative;\n  overflow: hidden;\n\n  /*\n\nIf you notice the effect reveal is like the word says it, it REVEALS, and what it reveals is \nthe image under it. with the ::after selector you are going to create a mask based \non 100% from another source, the source is the parent of the mask ::after and the parent is .img-container\n, the mask is going to adapt its 100% to whatever the parent size is, in this case:\n\n   width: 1000px;\n    height: 600px; \n    \nso the width and height, and the child (:after)\nis going to act as a curtain that you will open or reveal to see what is underneath.\n\n\n let imageReveal = CSSRulePlugin.getRule(\".img-container:after\");\n\n*/\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    right: 0;\n    background-color: rgb(255, 255, 255);\n  }\n\n  img {\n    width: 100%;\n    min-height: auto;\n    object-fit: cover;\n    position: absolute;\n  }\n}\n\n/*\n \n.main {\n  .container {\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background-color: rgb(255, 255, 255);\n\n     visibility: hidden;\n\n\n   }\n }\n \n .img-container {\n   width: 60vw;\n   height: 80vh;\n   position: relative;\n   overflow: hidden;\n\n \n   &:after {\n     content: \"\";\n     position: absolute;\n     width: 100%;\n     height: 100%;\n     top: 0;\n     right: 0;\n     background-color: rgb(255, 255, 255);\n   }\n \n   img {\n     width: 100%;\n     min-height: auto;\n     object-fit: cover;\n     position: absolute;\n   }\n }\n\n-------------------------------\n                                    FROM THE TUTORIAL\n                                    I dont know why i couldnt center the image with the settings\n                                    of the tutorial, that s why i came up with my own 2 styles that you can \n                                    see above, it worked just fine.\n\n\n\n\n.main {\n  .container {\n    width: 1440px;\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    margin: 0 auto;\n    background-color: darkorange;\n    visibility: hidden;\n  }\n}\n\n.img-container {\n  width: 1440px;\n  height: 960px;\n  position: relative;\n  overflow: hidden;\n  &:after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    right: 0;\n    background-color: darksalmon;\n  }\n\n  img {\n    width: 1440px;\n    position: absolute;\n  }\n}\n\n\n\n\n\n\n\n\n*/\n"]}